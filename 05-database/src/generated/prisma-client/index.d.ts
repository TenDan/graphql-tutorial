// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  director: (where?: DirectorWhereInput) => Promise<boolean>;
  movie: (where?: MovieWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  director: (where: DirectorWhereUniqueInput) => DirectorNullablePromise;
  directors: (args?: {
    where?: DirectorWhereInput;
    orderBy?: DirectorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Director>;
  directorsConnection: (args?: {
    where?: DirectorWhereInput;
    orderBy?: DirectorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DirectorConnectionPromise;
  movie: (where: MovieWhereUniqueInput) => MovieNullablePromise;
  movies: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Movie>;
  moviesConnection: (args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MovieConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDirector: (data: DirectorCreateInput) => DirectorPromise;
  updateDirector: (args: {
    data: DirectorUpdateInput;
    where: DirectorWhereUniqueInput;
  }) => DirectorPromise;
  updateManyDirectors: (args: {
    data: DirectorUpdateManyMutationInput;
    where?: DirectorWhereInput;
  }) => BatchPayloadPromise;
  upsertDirector: (args: {
    where: DirectorWhereUniqueInput;
    create: DirectorCreateInput;
    update: DirectorUpdateInput;
  }) => DirectorPromise;
  deleteDirector: (where: DirectorWhereUniqueInput) => DirectorPromise;
  deleteManyDirectors: (where?: DirectorWhereInput) => BatchPayloadPromise;
  createMovie: (data: MovieCreateInput) => MoviePromise;
  updateMovie: (args: {
    data: MovieUpdateInput;
    where: MovieWhereUniqueInput;
  }) => MoviePromise;
  updateManyMovies: (args: {
    data: MovieUpdateManyMutationInput;
    where?: MovieWhereInput;
  }) => BatchPayloadPromise;
  upsertMovie: (args: {
    where: MovieWhereUniqueInput;
    create: MovieCreateInput;
    update: MovieUpdateInput;
  }) => MoviePromise;
  deleteMovie: (where: MovieWhereUniqueInput) => MoviePromise;
  deleteManyMovies: (where?: MovieWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  director: (
    where?: DirectorSubscriptionWhereInput
  ) => DirectorSubscriptionPayloadSubscription;
  movie: (
    where?: MovieSubscriptionWhereInput
  ) => MovieSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MovieOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "duration_ASC"
  | "duration_DESC";

export type DirectorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DirectorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MovieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  director?: Maybe<DirectorWhereInput>;
  AND?: Maybe<MovieWhereInput[] | MovieWhereInput>;
  OR?: Maybe<MovieWhereInput[] | MovieWhereInput>;
  NOT?: Maybe<MovieWhereInput[] | MovieWhereInput>;
}

export interface DirectorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  movies_every?: Maybe<MovieWhereInput>;
  movies_some?: Maybe<MovieWhereInput>;
  movies_none?: Maybe<MovieWhereInput>;
  AND?: Maybe<DirectorWhereInput[] | DirectorWhereInput>;
  OR?: Maybe<DirectorWhereInput[] | DirectorWhereInput>;
  NOT?: Maybe<DirectorWhereInput[] | DirectorWhereInput>;
}

export type MovieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DirectorCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  movies?: Maybe<MovieCreateManyWithoutDirectorInput>;
}

export interface MovieCreateManyWithoutDirectorInput {
  create?: Maybe<
    MovieCreateWithoutDirectorInput[] | MovieCreateWithoutDirectorInput
  >;
  connect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
}

export interface MovieCreateWithoutDirectorInput {
  id?: Maybe<ID_Input>;
  title: String;
  duration: Int;
}

export interface DirectorUpdateInput {
  name?: Maybe<String>;
  movies?: Maybe<MovieUpdateManyWithoutDirectorInput>;
}

export interface MovieUpdateManyWithoutDirectorInput {
  create?: Maybe<
    MovieCreateWithoutDirectorInput[] | MovieCreateWithoutDirectorInput
  >;
  delete?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  connect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  set?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  disconnect?: Maybe<MovieWhereUniqueInput[] | MovieWhereUniqueInput>;
  update?: Maybe<
    | MovieUpdateWithWhereUniqueWithoutDirectorInput[]
    | MovieUpdateWithWhereUniqueWithoutDirectorInput
  >;
  upsert?: Maybe<
    | MovieUpsertWithWhereUniqueWithoutDirectorInput[]
    | MovieUpsertWithWhereUniqueWithoutDirectorInput
  >;
  deleteMany?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  updateMany?: Maybe<
    MovieUpdateManyWithWhereNestedInput[] | MovieUpdateManyWithWhereNestedInput
  >;
}

export interface MovieUpdateWithWhereUniqueWithoutDirectorInput {
  where: MovieWhereUniqueInput;
  data: MovieUpdateWithoutDirectorDataInput;
}

export interface MovieUpdateWithoutDirectorDataInput {
  title?: Maybe<String>;
  duration?: Maybe<Int>;
}

export interface MovieUpsertWithWhereUniqueWithoutDirectorInput {
  where: MovieWhereUniqueInput;
  update: MovieUpdateWithoutDirectorDataInput;
  create: MovieCreateWithoutDirectorInput;
}

export interface MovieScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  AND?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  OR?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
  NOT?: Maybe<MovieScalarWhereInput[] | MovieScalarWhereInput>;
}

export interface MovieUpdateManyWithWhereNestedInput {
  where: MovieScalarWhereInput;
  data: MovieUpdateManyDataInput;
}

export interface MovieUpdateManyDataInput {
  title?: Maybe<String>;
  duration?: Maybe<Int>;
}

export interface DirectorUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface MovieCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  duration: Int;
  director: DirectorCreateOneWithoutMoviesInput;
}

export interface DirectorCreateOneWithoutMoviesInput {
  create?: Maybe<DirectorCreateWithoutMoviesInput>;
  connect?: Maybe<DirectorWhereUniqueInput>;
}

export interface DirectorCreateWithoutMoviesInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface MovieUpdateInput {
  title?: Maybe<String>;
  duration?: Maybe<Int>;
  director?: Maybe<DirectorUpdateOneRequiredWithoutMoviesInput>;
}

export interface DirectorUpdateOneRequiredWithoutMoviesInput {
  create?: Maybe<DirectorCreateWithoutMoviesInput>;
  update?: Maybe<DirectorUpdateWithoutMoviesDataInput>;
  upsert?: Maybe<DirectorUpsertWithoutMoviesInput>;
  connect?: Maybe<DirectorWhereUniqueInput>;
}

export interface DirectorUpdateWithoutMoviesDataInput {
  name?: Maybe<String>;
}

export interface DirectorUpsertWithoutMoviesInput {
  update: DirectorUpdateWithoutMoviesDataInput;
  create: DirectorCreateWithoutMoviesInput;
}

export interface MovieUpdateManyMutationInput {
  title?: Maybe<String>;
  duration?: Maybe<Int>;
}

export interface DirectorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DirectorWhereInput>;
  AND?: Maybe<
    DirectorSubscriptionWhereInput[] | DirectorSubscriptionWhereInput
  >;
  OR?: Maybe<DirectorSubscriptionWhereInput[] | DirectorSubscriptionWhereInput>;
  NOT?: Maybe<
    DirectorSubscriptionWhereInput[] | DirectorSubscriptionWhereInput
  >;
}

export interface MovieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MovieWhereInput>;
  AND?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
  OR?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
  NOT?: Maybe<MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Director {
  id: ID_Output;
  name: String;
}

export interface DirectorPromise extends Promise<Director>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  movies: <T = FragmentableArray<Movie>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DirectorSubscription
  extends Promise<AsyncIterator<Director>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  movies: <T = Promise<AsyncIterator<MovieSubscription>>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DirectorNullablePromise
  extends Promise<Director | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  movies: <T = FragmentableArray<Movie>>(args?: {
    where?: MovieWhereInput;
    orderBy?: MovieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Movie {
  id: ID_Output;
  title: String;
  duration: Int;
}

export interface MoviePromise extends Promise<Movie>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  duration: () => Promise<Int>;
  director: <T = DirectorPromise>() => T;
}

export interface MovieSubscription
  extends Promise<AsyncIterator<Movie>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  director: <T = DirectorSubscription>() => T;
}

export interface MovieNullablePromise
  extends Promise<Movie | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  duration: () => Promise<Int>;
  director: <T = DirectorPromise>() => T;
}

export interface DirectorConnection {
  pageInfo: PageInfo;
  edges: DirectorEdge[];
}

export interface DirectorConnectionPromise
  extends Promise<DirectorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DirectorEdge>>() => T;
  aggregate: <T = AggregateDirectorPromise>() => T;
}

export interface DirectorConnectionSubscription
  extends Promise<AsyncIterator<DirectorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DirectorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDirectorSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DirectorEdge {
  node: Director;
  cursor: String;
}

export interface DirectorEdgePromise
  extends Promise<DirectorEdge>,
    Fragmentable {
  node: <T = DirectorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DirectorEdgeSubscription
  extends Promise<AsyncIterator<DirectorEdge>>,
    Fragmentable {
  node: <T = DirectorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDirector {
  count: Int;
}

export interface AggregateDirectorPromise
  extends Promise<AggregateDirector>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDirectorSubscription
  extends Promise<AsyncIterator<AggregateDirector>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MovieConnection {
  pageInfo: PageInfo;
  edges: MovieEdge[];
}

export interface MovieConnectionPromise
  extends Promise<MovieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MovieEdge>>() => T;
  aggregate: <T = AggregateMoviePromise>() => T;
}

export interface MovieConnectionSubscription
  extends Promise<AsyncIterator<MovieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MovieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMovieSubscription>() => T;
}

export interface MovieEdge {
  node: Movie;
  cursor: String;
}

export interface MovieEdgePromise extends Promise<MovieEdge>, Fragmentable {
  node: <T = MoviePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MovieEdgeSubscription
  extends Promise<AsyncIterator<MovieEdge>>,
    Fragmentable {
  node: <T = MovieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMovie {
  count: Int;
}

export interface AggregateMoviePromise
  extends Promise<AggregateMovie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovieSubscription
  extends Promise<AsyncIterator<AggregateMovie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DirectorSubscriptionPayload {
  mutation: MutationType;
  node: Director;
  updatedFields: String[];
  previousValues: DirectorPreviousValues;
}

export interface DirectorSubscriptionPayloadPromise
  extends Promise<DirectorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DirectorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DirectorPreviousValuesPromise>() => T;
}

export interface DirectorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DirectorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DirectorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DirectorPreviousValuesSubscription>() => T;
}

export interface DirectorPreviousValues {
  id: ID_Output;
  name: String;
}

export interface DirectorPreviousValuesPromise
  extends Promise<DirectorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DirectorPreviousValuesSubscription
  extends Promise<AsyncIterator<DirectorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MovieSubscriptionPayload {
  mutation: MutationType;
  node: Movie;
  updatedFields: String[];
  previousValues: MoviePreviousValues;
}

export interface MovieSubscriptionPayloadPromise
  extends Promise<MovieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MoviePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoviePreviousValuesPromise>() => T;
}

export interface MovieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoviePreviousValuesSubscription>() => T;
}

export interface MoviePreviousValues {
  id: ID_Output;
  title: String;
  duration: Int;
}

export interface MoviePreviousValuesPromise
  extends Promise<MoviePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  duration: () => Promise<Int>;
}

export interface MoviePreviousValuesSubscription
  extends Promise<AsyncIterator<MoviePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Movie",
    embedded: false
  },
  {
    name: "Director",
    embedded: false
  },
  {
    name: "TimeUnit",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
